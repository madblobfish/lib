#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "yamlite.y".
#

require 'racc/parser.rb'

# Experimental strict parser for a subset of yaml
#
# it does not pass a single file from https://github.com/yaml/yaml-test-suite
#
# generated using: racc yamlite.y -o yamlite.rb
# $debug = true
class YAMLite < Racc::Parser

module_eval(<<'...end yamlite.y/module_eval...', 'yamlite.y', 45)
  def emit_indent()

  end
  def parse(str)
    # raise "not utf8" if str.force_encoding("UTF-8").valid_encoding?
    @q = []
    row = 1
    column = 0
    start_of_file = true
    indent_type = nil
    indent_string = ''
    indent_level = 0
    until str.empty?
      case str
      when start_of_file && /\A---/
        # row += 1
        column += 3
        # ignore
      when /\A(\n? *)#([^\n]+)/
        row += 1 if $1.include?("\n")
        # if @q.last == :NEWLINE
        #   @q.pop
        # else
        #   @q.push [:COMMENT, $2, row, $1.length + 1]
        # end
        # ignore
      # what did this try to archive?
      # when (@q.last || []).first != :INDENT && /\A #[^\n]+/
      #   # inline comment, ignore
      # when (@q.last || []).first == :INDENT && /\A#[^\n]+/
      #   # comment, ignore
      when /\A\n([\t ]+)/
        if indent_type.nil?
          indent_type = $1.chr
        end
        row += 1
        column = $1.length
        raise 'mixed indent detected!' if ($1.split('') + [indent_type]).uniq.length != 1
        raise 'indent on empty line' if $'.chr == "\n"
        @q.push [:NEWLINE, '', row, 0] unless @q.last.first == :INDENT
        new_level = $1
        raise 'uneven indent, always use 2 spaces!' if indent_type == ' ' && new_level.length % 2 == 1
        depth = new_level.length / (indent_type == ' ' ? 2 : 1)
        diff = depth - indent_level
        if new_level.length > indent_string.length
          diff.abs.times{@q.push [:INDENT, $1, row, column]}
          indent_level += diff.abs
        elsif new_level.length < indent_string.length
          diff.abs.times{@q.push [:DEDENT, $1, row, column]}
          indent_level -= diff.abs
        end
        indent_string = new_level
      when /\A(true|false)/
        @q.push [:BOOL, $1, row, column]
        column += $1.length
      when /\A(-?)0x([0-9a-fA-F_]+)/
        @q.push [:NUMBER, ($1 == '-' ? -1 : 1) * Integer($2.tr('_', ''), 16), row, column]
        column += $1.length + 2 + $2.length
      when /\A(-?)([0-9_]+\.[0-9_]+)/
        @q.push [:NUMBER, ($1 == '-' ? -1 : 1) * $2.tr('_', '').to_f, row, column]
        column += $1.length + $2.length
      when /\A(-?)([0-9_]+)/
        @q.push [:NUMBER, ($1 == '-' ? -1 : 1) * Integer($2.tr('_', ''), 10), row, column]
        column += $1.length + $2.length
      when /\A"((?:[^"\\]|\\.)+)"/
        column += 2 + $1.length
        escapes = {
          '\\"' => '"',
          '\\\\' => '\\',
          '\\0' => "\0",
        }
        escapes.default_proc = proc{|a,b| raise "invalid escape #{b}" }
        @q.push [:STRING, $1.gsub(/\\./, escapes){|m| raise mescapes[m]} , row, column]
        /\A"((?:[^"\\]|\\.)+)"/ =~ str # secretly fixing $'
      when /\A /
        @q.push [:SPACE, ' ', row, column]
        column += 1
      when /\A([:-])/
        @q.push [$1, '', row, column]
        column += 1
      when /\A\n/
        row += 1
        column = 0
        @q.push [:NEWLINE, '', row, column]
        # peek for indentation and clear if no indent
        if str.match?(/\A\n[^ \t\n\z]/) && indent_level > 0
          indent_level.times{@q.push [:DEDENT, 'faked', row, column]}
          indent_level = 0
          indent_string = ''
        end
      when /\A([a-zA-Z0-9_.-]+)/
        @q.push [:DICT_KEY, $1, row, column]
        column += $1.length
      when /\A\r/
        raise "line-feed (\\r) not allowed"
      else
        raise "could not tokenize #{row}:#{column} '#{str.lines.take(5).join().rstrip}'"
      end
      start_of_file = false
      str = $'
    end
    # puts indent_level if $debug
    indent_level.times{@q.push [:DEDENT, $1, row, column]}
    @q.push [:EOF, 'EOF', row, column]
    # puts "tokens: #{@q.inspect}" if $debug
    @q.push [false, '$end', row, column]
    begin
      do_parse
    rescue
      raise "error parsing #{@current.first} at #{@current[2]}:#{@current[3]}"
    end
  end

  def next_token
    @current = @q.shift
    @current[0..1]
  end
...end yamlite.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    33,    34,    35,    13,    33,    34,    35,     3,     7,
    17,    10,    27,    12,    16,    15,    24,    10,    27,    12,
    27,    10,    31,    12,    31,    10,    18,    12,    10,    20,
    21,    12,    28,    29,    36,    27,    38,    27,    27,    27,
    46,    47,    48,    49,    50,    10,    54,    55,    56,    10,
    10,    59,    60 ]

racc_action_check = [
    24,    31,    31,    31,     1,    24,    24,    24,     0,     0,
     4,     0,    12,     0,     3,     3,    12,     3,    20,     3,
    38,    36,    20,    36,    38,    50,     5,    50,     8,     9,
    10,    11,    13,    16,    25,    27,    32,    33,    34,    35,
    42,    43,    44,    45,    48,    49,    51,    52,    53,    55,
    56,    57,    58 ]

racc_action_pointer = [
     6,     4,   nil,    12,     7,    23,   nil,   nil,    23,    25,
    24,    24,    10,    32,   nil,   nil,    30,   nil,   nil,   nil,
    16,   nil,   nil,   nil,    -5,    26,   nil,    33,   nil,   nil,
   nil,    -9,    32,    35,    36,    37,    16,   nil,    18,   nil,
   nil,   nil,    31,    32,    34,    35,   nil,   nil,    36,    40,
    20,    37,    38,    39,   nil,    44,    45,    42,    43,   nil,
   nil ]

racc_action_default = [
   -28,   -28,    -1,   -28,   -28,   -28,    -5,    -6,    -8,   -28,
   -11,   -13,   -28,   -28,    -2,    -6,   -28,    -3,    -4,    -9,
   -28,   -12,   -14,   -15,   -28,   -22,   -23,   -26,    61,    -7,
   -10,   -28,   -28,   -28,   -28,   -28,   -28,   -27,   -28,   -19,
   -20,   -21,   -28,   -28,   -28,   -28,   -24,   -25,   -28,   -28,
   -28,   -28,   -28,   -28,   -18,   -28,   -28,   -28,   -28,   -16,
   -17 ]

racc_goto_table = [
    19,    22,    37,    23,     2,     1,    32,    14,    39,    40,
    41,    30,    45,    44,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,    43,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    53,    51,    52,   nil,   nil,   nil,   nil,    57,    58 ]

racc_goto_check = [
     4,     3,    10,     8,     2,     1,     7,     2,    10,    10,
    10,     8,    11,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,     4,     4,   nil,   nil,   nil,   nil,     4,     4 ]

racc_goto_pointer = [
   nil,     5,     4,   -10,    -8,   nil,   nil,   -18,    -9,   nil,
   -25,   -26 ]

racc_goto_default = [
   nil,   nil,   nil,     4,     5,     6,     8,     9,   nil,    11,
    25,    26 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 14, :_reduce_none,
  2, 14, :_reduce_2,
  2, 15, :_reduce_none,
  2, 15, :_reduce_none,
  1, 15, :_reduce_none,
  1, 18, :_reduce_none,
  2, 18, :_reduce_none,
  1, 17, :_reduce_none,
  2, 17, :_reduce_9,
  3, 19, :_reduce_10,
  1, 20, :_reduce_none,
  2, 20, :_reduce_none,
  1, 16, :_reduce_none,
  2, 16, :_reduce_14,
  2, 22, :_reduce_15,
  11, 22, :_reduce_16,
  11, 22, :_reduce_17,
  8, 22, :_reduce_18,
  3, 24, :_reduce_19,
  3, 24, :_reduce_20,
  3, 24, :_reduce_21,
  1, 24, :_reduce_22,
  1, 21, :_reduce_none,
  4, 21, :_reduce_24,
  4, 21, :_reduce_25,
  1, 23, :_reduce_none,
  2, 23, :_reduce_none ]

racc_reduce_n = 28

racc_shift_n = 61

racc_token_table = {
  false => 0,
  :error => 1,
  :NEWLINE => 2,
  :EOF => 3,
  ":" => 4,
  :DICT_KEY => 5,
  :SPACE => 6,
  "-" => 7,
  :INDENT => 8,
  :DEDENT => 9,
  :BOOL => 10,
  :NUMBER => 11,
  :STRING => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEWLINE",
  "EOF",
  "\":\"",
  "DICT_KEY",
  "SPACE",
  "\"-\"",
  "INDENT",
  "DEDENT",
  "BOOL",
  "NUMBER",
  "STRING",
  "$start",
  "target",
  "document",
  "list",
  "dict",
  "eof",
  "dict_entry",
  "dict_key",
  "value",
  "list_entry",
  "newline",
  "simple_value" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'yamlite.y', 3)
  def _reduce_2(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'yamlite.y', 8)
  def _reduce_9(val, _values, result)
     result = val[0].merge(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 9)
  def _reduce_10(val, _values, result)
     result = Hash[[[val[0], val[2]]]]
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'yamlite.y', 12)
  def _reduce_14(val, _values, result)
     val[1].unshift(val[0]); result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 13)
  def _reduce_15(val, _values, result)
     result = [val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 15)
  def _reduce_16(val, _values, result)
          outer = Hash[[[val[2], val[7]]]]
      result = [val[9].merge(outer)]

    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 19)
  def _reduce_17(val, _values, result)
          outer = Hash[[[val[2], val[7]]]]
      result = [val[9].merge(outer)]

    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 22)
  def _reduce_18(val, _values, result)
     result = [val[6].merge(Hash[[[val[2], val[4]]]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 24)
  def _reduce_19(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 25)
  def _reduce_20(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 26)
  def _reduce_21(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 27)
  def _reduce_22(val, _values, result)
     result = nil
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'yamlite.y', 29)
  def _reduce_24(val, _values, result)
     result = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'yamlite.y', 30)
  def _reduce_25(val, _values, result)
     result = val[2]
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class YAMLite


if __FILE__ == $PROGRAM_NAME
  if ARGV.empty? || ARGV == ['--help']
    puts 'give me a file to parse, i output errors or json then'
  elsif ARGV == ['--selftest']
    ARGV = []
    require 'minitest'
    class TestMeme < Minitest::Test
      def test_asdf
        yl = YAMLite.new()
        Dir[__dir__ + '/yamlite_testfiles/valid/*.yaml'].each do |f|
          yl.parse(File.read(f))
        end
        Dir[__dir__ + '/yamlite_testfiles/bad/*.yaml'].each do |f|
          assert_raises{yl.parse(File.read(f))}
        end
      end
    end
    Minitest.autorun()
  else
    require 'json'
    puts JSON.pretty_generate(YAMLite.new().parse(File.read(ARGV.first)))
  end
end
# $debug = false
