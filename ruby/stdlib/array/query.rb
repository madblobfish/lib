#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

# $debug = false
class Array
class QueryParser < Racc::Parser

module_eval(<<'...end query.y/module_eval...', 'query.y', 122)

  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\s+/ #ignore spaces
      when /\Aall\s+([a-zA-Z0-9_.,-]+)/
        @q.push [:OP_ALL, 'all']
        @q.push [:VALUE, $1]
      when /\Ain\s+([a-zA-Z0-9_.,-]+)/
        @q.push [:OP_IN, 'in']
        @q.push [:VALUE, $1]
      when /\Ahas\s+([a-zA-Z0-9_.,-]+)/
        @q.push [:OP_HAS, 'has']
        @q.push [:VALUE, $1]
      when /\A[a-zA-Z0-9_.-]+\s+/
        @q.push [:VALUE_AND_SPACE, $&.strip]
      when /\A[a-zA-Z0-9_.-]+/
        @q.push [:VALUE, $&]
      when /\A==/
        @q.push [:OP_EQL, '==']
      when /\A!=/
        @q.push [:OP_NOT, '!=']
      when /\A[<>]=?/
        @q.push [:OP_NUM, $&]
      when /\A&&/
        @q.push [:OP_AND, '&&']
      when /\A\|\|/
        @q.push [:OP_OR, '||']
      when /\A[!()\n]|\|\||&&/o
        s = $&
        @q.push [s, s]
      else
        raise "could not tokenize #{str}"
      end
      str = $'
    end
    # puts "tokens: #{@q.inspect}" if $debug
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end
...end query.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    10,     3,     4,     9,     3,     4,     3,     4,    20,
     6,     7,    30,     6,     7,     6,     7,     3,     4,     3,
     4,    12,    13,    14,    11,     6,     7,     6,     7,    15,
    16,    17,    11,    10,     3,    23,     3,    23,     3,    23,
     3,    23,     3,    23,     3,    23 ]

racc_action_check = [
    19,    19,     0,     0,     1,     6,     6,     7,     7,     9,
     0,     0,    19,     6,     6,     7,     7,    10,    10,    11,
    11,     4,     4,     4,    21,    10,    10,    11,    11,     5,
     5,     5,     2,     2,    12,    12,    13,    13,    14,    14,
    15,    15,    16,    16,    17,    17 ]

racc_action_pointer = [
    -3,     4,    29,   nil,    11,    22,     0,     2,   nil,     9,
    12,    14,    29,    31,    33,    35,    37,    39,   nil,    -3,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
   -15,   -15,    -1,    -2,    -3,   -15,   -15,   -15,   -14,   -15,
   -15,   -15,   -15,   -15,   -15,   -15,   -15,   -15,   -12,   -15,
    31,   -10,   -11,    -3,    -7,    -8,    -9,    -4,    -5,    -6,
   -13 ]

racc_goto_table = [
     2,     1,   nil,   nil,   nil,   nil,    18,    19,   nil,   nil,
    21,    22,    24,    25,    26,    27,    28,    29 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,   nil,     2,     2,   nil,   nil,
     2,     2,     3,     3,     3,     3,     3,     3 ]

racc_goto_pointer = [
   nil,     1,     0,     0,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     5,     8 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 17, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  3, 20, :_reduce_4,
  3, 20, :_reduce_5,
  3, 20, :_reduce_6,
  3, 20, :_reduce_7,
  3, 20, :_reduce_8,
  3, 20, :_reduce_9,
  3, 18, :_reduce_10,
  3, 18, :_reduce_11,
  2, 18, :_reduce_12,
  3, 18, :_reduce_13,
  1, 18, :_reduce_none ]

racc_reduce_n = 15

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  :UNEG => 2,
  :OP_AND => 3,
  :OP_OR => 4,
  :VALUE => 5,
  :VALUE_AND_SPACE => 6,
  :OP_EQL => 7,
  :OP_NOT => 8,
  :OP_NUM => 9,
  :OP_HAS => 10,
  :OP_IN => 11,
  :OP_ALL => 12,
  "!" => 13,
  "(" => 14,
  ")" => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UNEG",
  "OP_AND",
  "OP_OR",
  "VALUE",
  "VALUE_AND_SPACE",
  "OP_EQL",
  "OP_NOT",
  "OP_NUM",
  "OP_HAS",
  "OP_IN",
  "OP_ALL",
  "\"!\"",
  "\"(\"",
  "\")\"",
  "$start",
  "target",
  "exp",
  "val",
  "query" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'query.y', 12)
  def _reduce_4(val, _values, result)
          # puts "eql #{val}" if $debug
      result = lambda{|h| h[val[0]].to_s == val[2]}
    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 15)
  def _reduce_5(val, _values, result)
          # puts "not #{val}" if $debug
      result = lambda{|h| h[val[0]].to_s != val[2]}
    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 18)
  def _reduce_6(val, _values, result)
          # puts "num #{val}" if $debug
      result = lambda{|h| h[val[0]].to_f.send(val[1].to_sym, val[2].to_f) }
    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 21)
  def _reduce_7(val, _values, result)
          # puts "has #{val}" if $debug
      result = lambda{|h| (h[val[0]].map(&:to_s) rescue h[val[0]].to_s).include?(val[2]) rescue false}

    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 25)
  def _reduce_8(val, _values, result)
          # puts "in #{val}" if $debug
      vals = val[2].split(',').map(&:strip)
      result = lambda{|h|
        if h[val[0]].class == Array
          (h[val[0]] & vals).any?
        else
          vals.include?(h[val[0]].to_s)
        end
      }

    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 36)
  def _reduce_9(val, _values, result)
          # puts "all #{val}" if $debug
      vals = val[2].split(',').map(&:strip)
      result = lambda{|h|
        if h[val[0]].class == Array
          (vals - h[val[0]]).empty?
        else
          false
        end
      }

    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 48)
  def _reduce_10(val, _values, result)
          # puts 'or' if $debug
      result = lambda{|h| val[0][h] || val[2][h]}
    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 51)
  def _reduce_11(val, _values, result)
          # puts 'and' if $debug
      result = lambda{|h| val[0][h] && val[2][h]}
    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 54)
  def _reduce_12(val, _values, result)
          # puts 'not' if $debug
      result = lambda{|h| ! val[1][h] }
    result
  end
.,.,

module_eval(<<'.,.,', 'query.y', 57)
  def _reduce_13(val, _values, result)
          # puts 'brack' if $debug
      result = val[1]
    result
  end
.,.,

# reduce 14 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class QueryParser

  def query(str)
    # puts "parsin" if $debug
    # puts str if $debug
    fun = QueryParser.new.parse(str)
    return self.select{|h|fun[h]}
  end
end
x = [
  {'a' => '1', 'b' => '1', 'c' => '3', 'd' => ['a', 'b']},
  {'a' => '1', 'b' => '2', 'c' => '3.4', 'd' => ['a', 'c']},
  {'a' => '1', 'b' => '2', 'c' => '4', 'd' => ['a']},
  {'a' => '1', 'b' => '2', 'c' => '4', 'd' => 'asd'},
]
raise 'ah' unless x.query('!a == 1') == x.select{|h| h['a'] != '1'}
raise 'ahh' unless x.query('(!(!(a==1))&& b == 2)') == x.select{|h| h['a'] == '1' && h['b'] == '2'}
raise 'ahhh' unless x.query('c == 1 && b != 2') == x.select{|h| h['c'] == '1' && h['b'] != '2'}
raise 'ahhh2' unless x.query('c == 1 || b == 2') == x.select{|h| h['c'] == '1' || h['b'] == '2'}
raise 'ahhhh' unless x.query('c == 1 || b == 2 && c != 4') == x.select{|h| h['c'] == '1' || h['b'] == '2' && h['c'] != '4'}
raise 'ahhhhh' unless x.query('c == 1 || b == 2 && c != 4') == x.select{|h| h['c'] == '1' || (h['b'] == '2' && h['c'] != '4')}
raise 'ahhhhhh' unless x.query('(c == 1 || b == 2) && c != 4') == x.select{|h| (h['c'] == '1' || h['b'] == '2') && h['c'] != '4'}
raise 'ahhhhhhh' unless x.query('b != 2 || (c == 1 || b == 2) && c != 4') == x.select{|h| h['b'] != '2' || (h['c'] == '1' || h['b'] == '2') && h['c'] != '4'}
raise 'ahhhhhhhh' unless x.query('d has d') == x.select{|h| [Array, String].include?(h['d'].class) && h['d'].include?('d')}
raise 'ahhhhhhhhh' unless x.query('!(d has b)') == x.select{|h| ! h['d'].include?('b')}
raise 'ahhhhhhhhhh' unless x.query('d has asd') == x.select{|h| h['d'].class == String && h['d'] == 'asd'}
raise 'ahhhhhhhhhhh' unless x.query('c > 3') == x.select{|h| h['c'].to_f > 3}
raise 'ahhhhhhhhhhhh' unless x.query('c > 3.3') == x.select{|h| h['c'].to_f > 3.3}
raise 'ahhhhhhhhhhhhh' unless x.query('(c > 2) || (c < 9)') == x.select{|h| h['c'].to_f > 2 || h['c'].to_f < 9}
raise 'ahhhhhhhhhhhhhh' unless x.query('c in 3,4') == x.select{|h| %w(3 4).include?(h['c'])}
raise 'ahhhhhhhhhhhhhhh' unless x.query('d in a,4') == x.select{|h| (%w(a 4) & h['d']).any? rescue false}
raise 'ahhhhhhhhhhhhhhhh' unless x.query('d all a,c') == x.select{|h| (%w(a c) - h['d']).empty? rescue false}
[
  '(c) > 3',
  'c !> 3',
  '(c > 3',
  'c > 3)',
  'ahasb = b',
  'a == b,',
  'a == b == c',
  'a has b has c',
  'a in b in c',
  'a all b all c',
  'a > b > c',
  '',
].each_with_index do |str, i|
  begin
    x.query(str)
    raise ('ahn'+ 'o'*i) + ': ' + str
  rescue Racc::ParseError => e
    raise ('ahhn'+ 'o'*i) + ': ' + str unless e.to_s.start_with?("\nparse error on value")
  rescue RuntimeError => e
    raise ('ahhn'+ 'o'*i) + ': ' + str unless e.to_s.start_with?("could not tokenize")
  end
end
# $debug = true
